
$color-g050: #e3fcef;
$color-n200: #6b778c;
$color-p400: #5243aa;
$color-n300: #5e6c84;
$color-p500: #403294;
$color-n400: #505f79;
$color-g075: #abf5d1;
$color-n500: #42526e;
$color-n600: #344563;
$color-n700: #253858;
$color-b050: #deebff;
$color-n800: #172b4d;
$color-g100: #79f2c0;
$color-n900: #091e42;
$color-g200: #57d9a3;
$color-b075: #b3d4ff;
$color-g300: #36b37e;
$color-g400: #00875a;
$color-g500: #006644;
$color-b100: #4c9aff;
$color-b200: #2684ff;
$color-b300: #0065ff;
$color-b400: #0052cc;
$color-y050: #fffae6;
$color-b500: #0747a6;
$color-y075: #fff0b3;
$color-t050: #e6fcff;
$color-y100: #ffe380;
$color-r050: #ffebe6;
$color-y200: #ffc400;
$color-n090: #8993a4;
$color-t075: #b3f5ff;
$color-y300: #ffab00;
$color-n080: #97a0af;
$color-y400: #ff991f;
$color-n070: #a5adba;
$color-p050: #eae6ff;
$color-r075: #ffbdad;
$color-y500: #ff8b00;
$color-n060: #b3bac5;
$color-t100: #79e2f2;
$color-n050: #c1c7d0;
$color-p075: #c0b6f2;
$color-t200: #00c7e6;
$color-n040: #dfe1e6;
$color-n030: #ebecf0;
$color-r100: #ff8f73;
$color-t300: #00b8d9;
$color-n020: #f4f5f7;
$color-r200: #ff7452;
$color-t400: #00a3bf;
$color-n010: #fafbfc;
$color-p100: #998dd9;
$color-r300: #ff5630;
$color-t500: #008da6;
$color-n000: #ffffff;
$color-p200: #8777d9;
$color-r400: #de350b;
$color-n100: #7a869a;
$color-p300: #6554c0;
$color-r500: #bf2600;
$size-xxl: 2.369rem;
$size-xxxxl: 4.209rem;
$size-l: 1.333rem;
$size-base: 18px;
$size-m: 1.000rem;
$size-xxxl: 3.157rem;
$size-xl: 1.777rem;
$size-s: 0.750rem;
$size-xs: 0.563rem;
$font-heading: 'Fira Sans', Helvetica, Arial, sans-serif;
$font-text: 'Fira Sans', Helvetica, Arial, sans-serif;
$weight-bold: 700;
$weight-semi-bold: 600;
$weight-normal: 400;
$weight-light: 300;
$opacity-disabled: 0.5;
$height-footer: 64px;
$tappable-square: 44px;
$duration-quickly: 0.08s;
$duration-slowly: 0.5s;
$z-index-modal: 9999;
$z-index-sticky: 100;
$media-query-s: (max-width: 767.98px);
$media-query-l: (max-width: 991.98px);
$shadow-s: 0 0 0 1px rgba(92,106,196,.1);
$spacing-xl: 2px;
$spacing-l: 1px;
$spacing-m: 0;
$spacing-s: -0.5px;
$spacing-xs: -1px;
$radius-default: 3px;
$radius-circle: 50%;
$space-xxl: 6.5ex;
$space-xl: 4ex;
$space-l: 2.5ex;
$space-m: 1.5ex;
$space-s: 1ex;
$space-xs: 0.5ex;
$line-height-l: 1.8;
$line-height-m: 1.6;
$line-height-s: 1.3;
$line-height-xs: 1;

/* VUE DESIGN SYSTEM SPACING HELPERS
--------------------------------------------- */

$squishing-ratio: 2;
$stretching-ratio: 3/2; // = ex. padding: 12px 8px 12px 8px

/*
  SPACE-INSET: For interface containers.
  SPACE-SQUISH: For buttons, table cells.
  STACK-SPACE: For vertically stacked content.
  SPACE-INLINE For things displayed inline.
  SPACE-STRETCH: For forms, textboxes.
*/

// Create inset-space
//
// @param  {Number} inset-space to set
@mixin space-inset($value) {
    padding: $value;
}

// Create inset-squish-space
//
// @param  {Number} inset-squish-space to set
@mixin space-squish($value) {
    padding: round($value / $squishing-ratio) $value round($value / $squishing-ratio);
}

// Create inset-stretch-space
//
// @param  {Number} inset-stretch-space to set
@mixin space-stretch($value) {
    padding: $value round($value / $stretching-ratio) $value;
}

// Create stack-space
//
// @param  {Number} stack-space to set
@mixin space-stack($value) {
    margin-bottom: $value;
    &:last-child {
        margin-bottom: 0;
    }
}

// Create space-inline
//
// @param  {Number} space-inline to set
@mixin space-inline($value) {
    margin-right: $value;
    &:last-child {
        margin-right: 0;
    }
}

/* GLOBAL MIXINS
--------------------------------------------- */

/* AUTO SCALING FOR TYPE WITH MIN/MAX SIZES

  @param {Number}  $responsive  - Viewport-based size
  @param {Number}  $min         - Minimum font size (px)
  @param {Number}  $max         - Maximum font size (px) (optional)

  @param {Number}  $fallback    - Fallback for viewport-based units (optional)

  @example SCSS - 5vw size, 35px min & 150px max size + 50px fallback:

  @include responsive-font(5vw, 35px, 150px, 50px);
*/
@mixin responsive-font($responsive, $min, $max: false, $fallback: false) {
  $responsive-unitless: $responsive / ($responsive - $responsive + 1);
  $dimension: if(unit($responsive) == "vh", "height", "width");
  $min-breakpoint: $min / $responsive-unitless * 100;

  @media (max-#{$dimension}: #{$min-breakpoint}) {
    font-size: $min;
  }

  @if $max {
    $max-breakpoint: $max / $responsive-unitless * 100;

    @media (min-#{$dimension}: #{$max-breakpoint}) {
      font-size: $max;
    }
  }

  @if $fallback {
    font-size: $fallback;
  }

  font-size: $responsive;
}

// Reset
@mixin reset {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

// Used to prevent text selection on an element
@mixin prevent-user-select {
  -webkit-user-select: none;
  -moz-user-select: none;
  user-select: none;
}

/// Used to hide an element visually, but keeping it accessible for
/// accessibility tools.
@mixin visually-hidden {
  // Need to make sure we override any existing styles.
  position: absolute !important;
  top: 0;
  clip: rect(1px, 1px, 1px, 1px) !important;
  overflow: hidden !important;
  height: 1px !important;
  width: 1px !important;
  padding: 0 !important;
  border: 0 !important;
}

/// To be used on flex items. Resolves some common layout issues, such as
/// text truncation not respecting padding or breaking out of container.
/// https://css-tricks.com/flexbox-truncated-text/
@mixin layout-flex-fix {
  min-width: 0;
  max-width: 100%;
}

/* GLOBAL FUNCTIONS
--------------------------------------------- */

// Create a tint
//
// @param  {Color}  $color to tint
// @param  {Number} $percentage of `$color` in returned color
// @return {Color}
@function tint($color, $percentage) {
  @return mix(white, $color, $percentage);
}

// Create a shade
//
// @param  {Color}  $color to shade
// @param  {Number} $percentage of `$color` in returned color
// @return {Color}
@function shade($color, $percentage) {
  @return mix(black, $color, $percentage);
}

// Calculate color difference
// See https://www.w3.org/TR/AERT/#color-contrast for algorithm
//
// @param  {Color} $color of foreground
// @param  {Color} $color of background
// @return {Boolean}
@function color-difference($foreground, $background) {
  $r: (max(red($foreground), red($background))) - (min(red($foreground), red($background)));
  $g: (max(green($foreground), green($background))) - (min(green($foreground), green($background)));
  $b: (max(blue($foreground), blue($background))) - (min(blue($foreground), blue($background)));
  $sum-rgb: $r + $g + $b;

  @if $sum-rgb < 350 {
    @return "false";
  } @else {
    @return "true";
  }
}

// Set text color based on contrast
//
// @param  {Color}  $color to set
// @param  {Color}  $background color to test
// @param  {Color}  $fallback color to set in case contrast check fails
@function set-text-color($color, $background, $fallback: null) {
  @if $fallback == null {
    $fallback: #000;
  }
  @if (color-difference($color, $background) == "false") {
    @return $fallback;
  } @else {
    @return $color;
  }
}

/// Darkens the foreground color by the background color. This is the same as the
/// “multiply” filter in graphics apps.
///
/// @param {Color} $foreground - The color to darken.
/// @param {Color} $background - The background to base darkening on.
/// @return {Color} The modified color.
@function color-multiply($foreground, $background: null) {
  @if $background == null {
    $background: #ffffff;
  }

  @return $foreground * $background / 255;
}

/// Returns the value in rem for a given pixel value.
/// @param {Number} $value - The pixel value to be converted.
/// @return {Number} The converted value in rem.
@function rem($value) {
  $unit: unit($value);

  @if $unit == "rem" {
    @return $value;
  } @else if $unit == "px" {
    @return $value / $size-m * 1rem;
  } @else if $unit == "em" {
    @return $unit / 1em * 1rem;
  } @else {
    @error "Value must be in px, em, or rem.";
  }
}

/// Returns the value in pixels for a given rem value.
/// @param {Number} $value - The rem value to be converted.
/// @return {Number} The converted value in pixels.
@function px($value) {
  $unit: unit($value);

  @if $unit == "px" {
    @return $value;
  } @else if $unit == "em" {
    @return ($value / 1em) * $size-m;
  } @else if $unit == "rem" {
    @return ($value / 1rem) * $size-m;
  } @else {
    @error "Value must be in rem, em, or px.";
  }
}

/// Returns the list of available names in a given map.
/// @param {Map} $map - The map of data to list the names from.
/// @param {Number} $map - The level of depth to get names from.
/// @return {String} The list of names in the map.
@function available-names($map, $level: 1) {
  @if type-of($map) != "map" {
    @return null;
  }

  $output: "";
  $newline: "\A ";

  @if $level == 1 {
    @each $key, $value in $map {
      $output: $output + "#{$newline}- #{$key} #{available-names($value, $level + 1)}";
    }
  } @else {
    $output: "(";
    $i: 1;

    @each $key, $value in $map {
      $sep: if($i < length($map), ", ", "");
      $output: $output + "#{$key}#{$sep}#{available-names($value, $level + 1)}";
      $i: $i + 1;
    }

    $output: $output + ")";
  }

  @return $output;
}
